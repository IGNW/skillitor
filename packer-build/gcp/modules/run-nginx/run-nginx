#!/bin/bash
# This script is used to configure and run nginx as a simple HTTP proxy server with process supervision provided by
# supervisord. Nginx will be configured to forward all inbound requests to the --proxy-pass-url option.

set -e

readonly NGINX_CONFIG_FILE="nginx.conf"
readonly SUPERVISOR_CONFIG_PATH="/etc/supervisor/conf.d/run-nginx.conf"
readonly DEFAULT_NGINX_PID_FOLDER="/var/run/nginx"

readonly DEFAULT_PORT=8000
readonly DEFAULT_PROXY_PASS_URL="https://127.0.0.1:8200/v1/sys/health?standbyok=true"
readonly DEFAULT_LOG_LEVEL="info"

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SCRIPT_NAME="$(basename "$0")"

function print_usage {
  echo
  echo "Usage: run-nginx [OPTIONS]"
  echo
  echo "This script is used to configure and run nginx as a simple HTTP proxy server."
  echo
  echo "Optional Arguments:"
  echo
  echo -e "  --port\t\tThe port on which the HTTP server accepts inbound connections. Default: $DEFAULT_PORT"
  echo -e "  --proxy-pass-url\tThe URL to which all inbound requests will be forwarded. Default: $DEFAULT_PROXY_PASS_URL"
  echo -e "  --pid-folder\t\tThe local folder that should contain the PID file to be used by nginx. Default: $DEFAULT_NGINX_PID_FOLDER."
  echo -e "  --config-dir\t\tThe path to the nginx config folder. Default is the absolute path of '../config', relative to this script."
  echo -e "  --bin-dir\t\tThe path to the folder with the nginx binary. Default is the absolute path of the parent folder of this script."
  echo -e "  --log-dir\t\tThe path to the nginx log folder. Default is the absolute path of '../log', relative to this script."
  echo -e "  --log-level\t\tThe log verbosity to use with nginx. Default is $DEFAULT_LOG_LEVEL."
  echo -e "  --user\t\tThe user to run nginx as. Default is to use the owner of --config-dir."
  echo
  echo "Example:"
  echo
  echo "run-nginx --port 8000"
  echo
}

function log {
  local readonly level="$1"
  local readonly message="$2"
  local readonly timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
  local readonly message="$1"
  log "INFO" "$message"
}

function log_warn {
  local readonly message="$1"
  log "WARN" "$message"
}

function log_error {
  local readonly message="$1"
  log "ERROR" "$message"
}

function assert_not_empty {
  local readonly arg_name="$1"
  local readonly arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

function assert_is_installed {
  local readonly name="$1"

  if [[ ! $(command -v ${name}) ]]; then
    log_error "The binary '$name' is required by this script but is not installed or in the system's PATH."
    exit 1
  fi
}

function generate_ngnix_config {
  local readonly port="$1"
  local readonly config_dir="$2"
  local readonly pid_folder="$3"
  local readonly user="$4"
  local readonly proxy_pass_url="$5"
  local readonly config_path="$config_dir/$NGINX_CONFIG_FILE"

  log_info "Creating default nginx config file in $config_path"
  cat > "$config_path" <<EOF
# Running any extra software on our Vault servers makes me anxious, so at least this Nginx config file carefully thinks
# through every option. Feedback is welcome on any security improvements here.

# Use just a single core since we expect low traffic
# http://nginx.org/en/docs/ngx_core_module.html#worker_processes
worker_processes  1;

# Defines a file that will store the process ID of the main process.
# Note that we pass the location of this file directly to supervisord
# http://nginx.org/en/docs/ngx_core_module.html#pid
pid  $pid_folder/nginx.pid;

# Configure error logs
# http://nginx.org/en/docs/ngx_core_module.html#error_log
error_log  /var/log/nginx/error.log  warn;

# Run nginx as a foreground process (vs. background service) because supervisord will be acting as the process supervisor
# http://nginx.org/en/docs/ngx_core_module.html#daemon
daemon  off;

# Set the maximum number of simultaneous connections that can be opened by a worker process.
# http://nginx.org/en/docs/ngx_core_module.html#worker_connections
events {
  worker_connections  1024;
}

# Configuration directives for handling HTTP traffic
# http://nginx.org/en/docs/http/ngx_http_core_module.html
http {

  # Map file name extensions to MIME types of responses. Note that we enable a single MIME type.
  # http://nginx.org/en/docs/http/ngx_http_core_module.html#types
  types {
    application/json  json;
  }

  # Define the default MIME type of an HTTP response.
  # http://nginx.org/en/docs/http/ngx_http_core_module.html#default_type
  default_type  application/json;

  # Declare log the formatting type "main"
  log_format  main  '\$remote_addr - \$remote_user [\$time_local] "\$request" '
  '\$status \$body_bytes_sent "\$http_referer" '
  '"\$http_user_agent" "\$http_x_forwarded_for"';

  # Declare the location of non-error logs using the "main" formatting type
  access_log  /var/log/nginx/access.log  main;

  # We're using Nginx as a reverse proxy and don't need to read any local files, so disable this
  # https://t37.net/nginx-optimization-understanding-sendfile-tcp_nodelay-and-tcp_nopush.html
  sendfile  off;

  # Keep TCP client connections open for this many seconds before timing out. We want this slightly higher than one minute
  # so that health checks sent every 60 seconds need not re-establish a TCP connection.
  # http://nginx.org/en/docs/http/ngx_http_core_module.html#keepalive_timeout
  keepalive_timeout  65;

  # Configuration directives for a virtual server
  # http://nginx.org/en/docs/http/ngx_http_core_module.html#server
  server {

    # Listen for inbound connections on this port
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#listen
    listen  $port;

    # Set the name of the virtual server. Use the local machine's hostname; note that we are passing a string literal
    # here to be evaluated by nginx, not a local bash variable.
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#server_name
    server_name  "\$hostname";

    # Proxy all requests to Vault listening on 127.0.0.1:8200
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#location
    # http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass
    location / {
        proxy_set_header  Host \$host;
        proxy_pass  $proxy_pass_url;
        proxy_redirect  off;
    }
  }
}
EOF
  chown "$user:$user" "$config_path"
}

function generate_supervisor_config {
  local readonly supervisor_config_path="$1"
  local readonly nginx_config_dir="$2"
  local readonly nginx_bin_dir="$3"
  local readonly nginx_log_dir="$4"
  local readonly nginx_log_level="$5"
  local readonly nginx_user="$6"

  log_info "Creating Supervisor config file to run Nginx in $supervisor_config_path"
  cat > "$supervisor_config_path" <<EOF
[program:nginx]
command=/usr/bin/pidproxy /var/run/nginx.pid $nginx_bin_dir/nginx -c $nginx_config_dir/nginx.conf
stdout_logfile=$nginx_log_dir/nginx-stdout.log
stderr_logfile=$nginx_log_dir/nginx-error.log
numprocs=1
autostart=true
autorestart=true
stopsignal=INT
user=$nginx_user
EOF
}

function start_nginx {
  log_info "Reloading Supervisor config and starting Nginx"
  supervisorctl reread
  supervisorctl update
}

# Based on: http://unix.stackexchange.com/a/7732/215969
function get_owner_of_path {
  local readonly path="$1"
  ls -ld "$path" | awk '{print $3}'
}

function run {
  local port="$DEFAULT_PORT"
  local proxy_pass_url="$DEFAULT_PROXY_PASS_URL"
  local pid_folder="$DEFAULT_NGINX_PID_FOLDER"
  local config_dir=""
  local bin_dir=""
  local log_dir=""
  local log_level="$DEFAULT_LOG_LEVEL"
  local user=""

  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --port)
        port="$2"
        shift
        ;;
      --proxy-pass-url)
        proxy_pass_url="$2"
        shift
        ;;
      --config-dir)
        config_dir="$2"
        shift
        ;;
      --pid-folder)
        pid_folder="$2"
        shift
        ;;
      --user)
        user="$2"
        shift
        ;;
      --bin-dir)
        assert_not_empty "$key" "$2"
        bin_dir="$2"
        shift
        ;;
      --log-dir)
        assert_not_empty "$key" "$2"
        log_dir="$2"
        shift
        ;;
      --log-level)
        assert_not_empty "$key" "$2"
        log_level="$2"
        shift
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  assert_not_empty "--port" "$port"
  assert_not_empty "--proxy-pass-url" "$proxy_pass_url"
  assert_not_empty "--pid-folder" "$pid_folder"

  assert_is_installed "supervisorctl"

  if [[ -z "$config_dir" ]]; then
    config_dir=$(cd "$SCRIPT_DIR/../config" && pwd)
  fi

  if [[ -z "$bin_dir" ]]; then
    bin_dir=$(cd "$SCRIPT_DIR/../bin" && pwd)
  fi

  if [[ -z "$log_dir" ]]; then
    log_dir=$(cd "$SCRIPT_DIR/../log" && pwd)
  fi

  if [[ -z "$user" ]]; then
    user=$(get_owner_of_path "$config_dir")
  fi

  generate_ngnix_config "$port" "$config_dir" "$pid_folder" "$user" "$proxy_pass_url"
  generate_supervisor_config "$SUPERVISOR_CONFIG_PATH" "$config_dir" "$bin_dir" "$log_dir" "$log_level" "$user"
  start_nginx
}

run "$@"